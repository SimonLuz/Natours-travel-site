

/* Code copied from style.css into main.scss, SASS code starts to be written in */

/* VARIABLES */
$color-primary: #55c57a;
$color-primary-light: #7ed56f;
$color-primary-dark: #28b485;

$color-gray-dark: #777;
$color-white: #fff;




/* Global rules instead of Normalize.com */
*,
*::after,
*::before {
	margin: 0;
	padding: 0;
	box-sizing: inherit;
}

/* PROJECT-WIDE FONT DEFINITIONS: Font styles ALWAYS in the <body> selector - because the properties of fonts are INHERITED (???), will be explained later */

html {
	font-size: 62.5%;
}

body {
	font-family: "Lato", sans-serif;
	font-weight: 400;
	/*font-size: 16px;*/
	line-height: 1.7;
	color: $color-gray-dark;
	padding: 1rem;
	
	box-sizing: border-box;
}

.header {
	height: 95vh;
	background-image: linear-gradient(
		to right bottom, 
		rgba($color-primary-light, 0.75), 
		rgba($color-primary-dark, 0.75)), 
		url(../img/hero.jpg);
/* Only SCSS file can take a variable in rgba */
	background-size: cover;
	background-position: top;
	
	-webkit-clip-path: polygon(0% 0% ,100% 0%, 100% 80vh, 0% 100%);
	position: relative;
}

.header__logo-box {
	position: absolute;
	top: 4rem;
	left: 4rem;
}

.header__logo {
	height: 3.5rem;
}

.header__logo:hover {
	transform: translateY(-3px);
	box-shadow: .1rem 1rem 2rem rgba(0, 0, 0, .3);
}

.Header__logo:active {
	transform: translateY(-1px);
	box-shadow: 0px 5px 10px rgba(0, 0, 0, .3);
}

/* ANIMATIONS CAN be applied to :hover */
.header__logo:hover {
   animation: moveInRight 2s ease-out;	
}



.header__text-box {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-40%, -50%);
	text-align: center;
	
}

.heading-primary {
	color: $color-white;
	text-transform: uppercase;
	font-weight: 400;
    
    backface-visibility: hidden; /* FIX for a shaking picture  during transform animations */
	margin-bottom: 6rem;
}

.heading-primary--main {
	display: block;
	font-size: 6rem;
	font-weight: 400;
	letter-spacing: 2.5rem;
    
    animation-name: moveInLeft;
    animation-duration: 2s;
    animation-timing-function: ease-out;
    
    
    /*
    animation-delay: 2s;
    animation-iteration-count: 3;
    */
}

.heading-primary--sub {
	display: block;
	font-size: 2rem;
	font-weight: 700;
	letter-spacing: 1.75rem;
    
    animation: moveInRight 2s ease-out;
}

@keyframes moveInLeft {
	0% {
		opacity: 0;
        transform: translateX(-10rem);
	}
    
    	
	80% {
		transform: translateX(1rem);
	}
	
	100% {
		opacity: 1;
        transform: translateX(0);
	}
}

@keyframes moveInRight {
    0% {
        opacity: 0;
        transform: translateX(10rem);
    }
    
    80% {
        transform: translateX(-10rem);
    }
    
    100% {
        opacity: 1;
        transform: translateX(0);
    }
}

@keyframes moveFromBottom {
	
	0% {
		opacity: 0;
		transform: translateY(5rem);
	}
	
	100% {
		opacity: 100%;
		transform: translateY(0);
	}
}

.btn:link,
.btn:visited {
	display: inline-block;
	margin: 0 auto;
	text-transform: uppercase;
	text-decoration: none;
	padding: .8rem 2.3rem;
	border-radius: 5rem;
	transition: all .2s;
	position: relative;
	font-size: 1.6rem;
}
/* :link is a pseudo-class (pseudo-classes are special states, or special condition of the selector!!!!)
- we want the :visited state to look like :link state
*/

.btn:hover {
	transform: translateY(-3px);
	box-shadow: 0 1rem 2rem rgba(0, 0, 0, .3);
}

/* :active - a state when element is clicked on 
	values in translateY(...) are ALWAYS IN RELATION TO THE INITAL STATE, not hover state!!!!*/
.btn:active {
	transform: translateY(-1px);
	box-shadow: 0 .5rem 1rem rgba(0, 0, 0, .3);
	
}
.btn--white {
	background-color: $color-white;
	color: $color-gray-dark;
}

/* :after pseudo-element can be used to insert extra content after the element */
.btn::after {
	content: "";
	display: inline-block;
/* content & display properties must be declared; we want the element to be "behind" the button here 
- essentially ::after element is like a child element*/
	height: 100%;
	width: 100%;
	border-radius: 10rem;
	position: absolute;
	top: 0;
	left: 0;
	z-index: -1;
	transition: all .4s; /*:after is the INITIAL STATE for scale() */
}

.btn--white::after {
	background-color: $color-white;
}

.btn:hover::after {
	transform: scaleX(1.4) scaleY(1.8);
	opacity: 0;
}


.btn--animated {
	animation: moveFromBottom .5s ease-out .75s;
	animation-fill-mode: backwards; 
}
